{"version":3,"sources":["services/speechToText.js","components/ResizableTextarea/ResizableTextarea.js","components/Text/Text.js","services/twitter.js","App.js","serviceWorker.js","index.js"],"names":["feature","recognition","text","stopped","editable","error","shareOnTwitter","ResizableTextarea","props","handleChange","event","state","minRows","maxRows","previousRows","target","rows","currentRows","scrollHeight","scrollTop","value","console","log","onEdit","this","nameInput","focus","className","onChange","ref","input","React","PureComponent","RawText","Text","featureNames","reduce","final","current","init","cb","find","window","errorMessage","listen","onstart","onaudioend","onresult","oldText","result","results","transcript","confidence","Math","round","chars","split","formatted","length","toUpperCase","slice","join","includes","toLowerCase","abort","start","setText","newText","publish","encodedText","encodeURI","url","open","App","defaultState","message","probability","transcriptionHandler","bind","editHandler","setRandomMessage","timer","messages","setState","twitter","speechToText","items","randomIndex","floor","random","setInterval","clearInterval","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","WebFont","load","google","families","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2dabf1ff.chunk.js","sourcesContent":["const featureOriginalName = 'SpeechRecognition';\nconst vendorPrefixes = [\n  'webkit',\n];\nconst featureNames = vendorPrefixes.reduce((final, current) => [...final, `${current}${featureOriginalName}`], [featureOriginalName]);\n\nconsole.log('featureNames', featureNames);\n\nlet feature, recognition, text, stopped, editable, error, shareOnTwitter;\n\nfunction init(cb) {\n  editable = false;\n  feature = featureNames.find(feature => typeof window[feature] !== 'undefined');\n\n  if (!feature) {\n    const errorMessage = 'speech-to-text not supported in this browser';\n    console.log(errorMessage);\n    return cb(errorMessage);\n  }\n\n  console.log('supported feature: ', feature);\n  listen(cb);\n};\n\nfunction listen (cb) {\n  stopped = false;\n  shareOnTwitter = false;\n\n  recognition = new window[feature]();\n  recognition.onstart = () => console.log('voice recognition started!');\n  recognition.onaudioend = () => {\n    console.log('stop listening');\n    if (!stopped) {\n      listen(cb);\n    }\n  }\n  recognition.onresult = event => {\n    const oldText = text;\n    const result = event.results[0][0];\n    const { transcript, confidence } = result;\n    console.log(`${Math.round(confidence * 100)}%: ${transcript}`);\n\n    const chars = transcript.split('');\n    const formatted = `${chars.length ? chars[0].toUpperCase() : ''}${chars.slice(1).join('')}${chars.length ? '.' : ''}`\n    text = formatted;\n\n    if (['edita', 'editar'].includes(transcript)) {\n      console.log('signal to edit text');\n      text = oldText\n      editable = true;\n    }\n\n    if (['cancela', 'cancelar'].includes(transcript)) {\n      console.log('signal to cancel');\n      text = '';\n      editable = false;\n    }\n\n    if ('twitter' === transcript.toLowerCase()) {\n      console.log('signal to tweet');\n      text = oldText;\n      shareOnTwitter = true;\n    }\n\n    if (['stop', 'deja de escuchar'].includes(transcript)) {\n      console.log('signal to stop');\n      stopped = true;\n      editable = false;\n      error = 'Ya no te escucho :(';\n      recognition.abort();\n    }\n\n    cb(error, text, confidence, editable, shareOnTwitter);\n\n    if (!stopped) {\n      listen(cb);\n    }\n  };\n  recognition.start();\n};\n\nfunction setText(newText) {\n  text = newText;\n}\n\n\nexport default {\n  text,\n  init,\n  setText,\n};\n","/**\r\n * Comes from https://codepen.io/liborgabrhel/pen/eyzwOx\r\n */\r\nimport React from 'react';\r\n\r\nclass ResizableTextarea extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      minRows: 5,\r\n      maxRows: 10,\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const textareaLineHeight = 24;\r\n    const { minRows, maxRows } = this.state;\r\n\r\n    const previousRows = event.target.rows;\r\n    event.target.rows = minRows; // reset number of rows in textarea\r\n\r\n    const currentRows = ~~(event.target.scrollHeight / textareaLineHeight);\r\n\r\n    if (currentRows === previousRows) {\r\n      event.target.rows = currentRows;\r\n    }\r\n\r\n    if (currentRows >= maxRows) {\r\n      event.target.rows = maxRows;\r\n      event.target.scrollTop = event.target.scrollHeight;\r\n    }\r\n\r\n    const rows = currentRows < maxRows ? currentRows : maxRows;\r\n    const text = event.target.value;\r\n\r\n    console.log('DEBUG');\r\n    this.props.onEdit({ rows, text });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.nameInput.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <textarea\r\n        rows={this.props.rows}\r\n        value={this.props.text}\r\n        className=\"app__input app__text app__section\"\r\n        onChange={this.handleChange}\r\n        ref={input => this.nameInput = input}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResizableTextarea;\r\n","import React from 'react';\nimport ResizableTextarea from '../ResizableTextarea/ResizableTextarea';\n\nconst RawText = ({ text }) => <div className=\"app__text app__section\">{text}</div>;\n\nconst Text = ({ text, editable, onEdit, rows }) => (\n  editable ?\n  <ResizableTextarea text={text} onEdit={onEdit} rows={rows}/> :\n  <RawText text={text}/>\n);\n\nexport default Text;\n","const TWITTER_PUBLISH_URL = 'https://twitter.com/intent/tweet';\nconst TWITTER_TWEET_KEY = 'text';\n\nfunction publish (text) {\n  const encodedText = encodeURI(text);\n  const url = `${TWITTER_PUBLISH_URL}?${TWITTER_TWEET_KEY}=${encodedText}`;\n  window.open(url);\n}\n\nexport default {\n  publish,\n};\n","import React from 'react';\nimport './App.css';\nimport Text from './components/Text/Text';\nimport speechToText from './services/speechToText';\nimport twitter from './services/twitter';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultState = {\n      message: '',\n      error: '',\n      text: '',\n      rows: 5,\n      probability: 0,\n      editable: false,\n    };\n    this.state = { ...this.defaultState };\n    this.transcriptionHandler = this.transcriptionHandler.bind(this);\n    this.editHandler = this.editHandler.bind(this);\n    this.setRandomMessage = this.setRandomMessage.bind(this);\n    this.timer = null;\n    this.messages = [\n      'Di algo.',\n      'Di \"twitter\" para publicar en Twitter.',\n      'Di \"editar\" para editar manualmente el texto.',\n      'Di \"cancelar\" para eliminar el texto.',\n      'Di \"deja de escuchar\" para eliminar la escucha.',\n    ];\n  }\n\n  transcriptionHandler(error, text, probability, editable, shareOnTwitter) {\n    if (error) {\n      return this.setState({ ...this.defaultState, error });\n    }\n\n    this.setState({ text, probability, editable });\n\n    if (shareOnTwitter) {\n      twitter.publish(text);\n    }\n  }\n\n  editHandler(props) {\n    speechToText.setText(props.text);\n    this.setState({ ...props });\n  }\n\n  setRandomMessage() {\n    const items = this.messages;\n    const randomIndex = Math.floor(Math.random() * items.length);\n    this.setState({ message: items[randomIndex] });\n  }\n\n  componentDidMount() {\n    speechToText.init(this.transcriptionHandler);\n    this.setRandomMessage();\n    this.timer = setInterval(this.setRandomMessage, 1000 * 3);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app__section error\">\n          {this.state.error ? this.state.error : this.state.message }\n        </div>\n        <Text\n          text={this.state.text}\n          editable={this.state.editable}\n          onEdit={this.editHandler}\n          rows={this.state.rows}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Roboto', 'sans-serif']\n  }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}